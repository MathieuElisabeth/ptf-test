---
import { experiences } from '../utils/experiences.js';
---

<section class="experience-section" id="experience">
  <div class="experience-container">
    <h2>Expérience professionnelle</h2>
    <div class="experience-timeline">
      <!-- SVG Timeline -->
      <svg class="timeline-svg" viewBox="0 0 4 800" preserveAspectRatio="none">
        <defs>
          <linearGradient id="timelineGradient" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="0%" style="stop-color:var(--green);stop-opacity:1" />
            <stop offset="100%" style="stop-color:var(--green);stop-opacity:0.3" />
          </linearGradient>
        </defs>
        <path 
          class="timeline-path" 
          d="M2,0 L2,800" 
          stroke="url(#timelineGradient)" 
          stroke-width="2" 
          fill="none"
          pathLength="100"
        />
      </svg>

      {experiences.map((exp, index) => (
        <article class="experience-item" data-index={index} key={index}>
          <!-- Timeline Point -->
          <div class="timeline-point">
            <div class="point-inner"></div>
            <div class="point-pulse"></div>
          </div>
          
          <div class="experience-content">
            <div class="experience-header">
              <h3 class="experience-title">{exp.title}</h3>
              <div class="experience-company">
                <a 
                  href={exp.link} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  aria-label={`Visiter le site de ${exp.company} (ouvre dans un nouvel onglet)`}
                >
                  {exp.company}
                  <i class="fas fa-external-link-alt" aria-hidden="true"></i>
                </a>
              </div>
              <div class="experience-duration">{exp.duration}</div>
            </div>
            <div class="experience-tasks">
              <h4 class="sr-only">Missions et responsabilités</h4>
              <ul role="list">
                {exp.tasks.map((task, taskIndex) => (
                  <li key={taskIndex} role="listitem" class="task-item" data-task={taskIndex}>
                    {task}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</section>

<style lang="scss">
  .experience-section {
    position: relative;
    background-color: var(--bg-color);
    padding: 200px 0;
    min-height: 100vh;
    z-index: 2;

    h2 {
      text-align: center;
      color: var(--white);
      margin-bottom: 4rem;
      font-size: 2.5rem;
      opacity: 0;
      transform: translateY(30px);
    }
  }

  .experience-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 200px;

    @media (max-width: 1024px) {
      padding: 0 70px;
    }

    @media (max-width: 600px) {
      padding: 0 20px;
    }
  }

  .experience-timeline {
    position: relative;
    padding-left: 80px;

    @media (max-width: 768px) {
      padding-left: 50px;
    }
  }

  .timeline-svg {
    position: absolute;
    left: 30px;
    top: 0;
    width: 4px;
    height: 100%;
    z-index: 1;

    @media (max-width: 768px) {
      left: 15px;
    }
  }

  .timeline-path {
    stroke-dasharray: 100;
    stroke-dashoffset: 100;
  }

  .experience-item {
    position: relative;
    margin-bottom: 4rem;
    opacity: 0;
    transform: translateX(-50px);

    &:last-child {
      margin-bottom: 0;
    }
  }

  .timeline-point {
    position: absolute;
    left: -59px;
    top: 20px;
    width: 20px;
    height: 20px;
    z-index: 2;
    opacity: 0;
    transform: scale(0);

    @media (max-width: 768px) {
      left: -44px;
      width: 18px;
      height: 18px;
    }

    .point-inner {
      width: 100%;
      height: 100%;
      background: var(--green);
      border-radius: 50%;
      border: 4px solid var(--bg-color);
      position: relative;
      z-index: 3;
    }

    .point-pulse {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 100%;
      height: 100%;
      background: var(--green);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      opacity: 0.6;
      z-index: 1;
    }
  }

  .experience-content {
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--border-radius);
    padding: 2rem;
    border-left: 4px solid var(--green);
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);

    &:hover {
      background: rgba(255, 255, 255, 0.08);
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(74, 158, 255, 0.1);
    }
  }

  .experience-header {
    margin-bottom: 1.5rem;
  }

  .experience-title {
    font-size: var(--fz-xl);
    color: var(--white);
    margin: 0 0 0.5rem 0;
    font-weight: 600;
  }

  .experience-company {
    margin-bottom: 0.5rem;

    a {
      color: var(--green);
      font-weight: 500;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;

      &:hover {
        color: var(--white);
        transform: translateX(5px);
      }

      i {
        font-size: 0.8rem;
        transition: transform 0.3s ease;
      }

      &:hover i {
        transform: translateX(3px);
      }
    }
  }

  .experience-duration {
    color: var(--light-slate);
    font-size: var(--fz-sm);
    font-family: var(--font-mono);
  }

  .experience-tasks {
    h4 {
      margin: 0 0 1rem 0;
      color: var(--white);
      font-size: var(--fz-lg);
    }

    ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .task-item {
      position: relative;
      padding-left: 1.5rem;
      margin-bottom: 0.75rem;
      color: var(--light-slate);
      line-height: 1.6;
      opacity: 0;
      transform: translateX(-20px);

      &::before {
        content: '▸';
        position: absolute;
        left: 0;
        color: var(--green);
        font-weight: bold;
        transition: transform 0.3s ease;
      }

      &:hover::before {
        transform: translateX(3px);
      }
    }
  }

  // Pulse animation for timeline points
  @keyframes pulse {
    0% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 0.6;
    }
    50% {
      transform: translate(-50%, -50%) scale(1.5);
      opacity: 0.3;
    }
    100% {
      transform: translate(-50%, -50%) scale(2);
      opacity: 0;
    }
  }

  .timeline-point.animated .point-pulse {
    animation: pulse 2s ease-out infinite;
  }
</style>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  document.addEventListener('DOMContentLoaded', () => {
    const section = document.querySelector('.experience-section');
    const heading = section?.querySelector('h2');
    const timelinePath = section?.querySelector('.timeline-path');
    const experienceItems = section?.querySelectorAll('.experience-item');
    const timelinePoints = section?.querySelectorAll('.timeline-point');
    
    if (!section || !timelinePath) return;

    // Create main timeline
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: section,
        start: 'top 80%',
        end: 'bottom 20%',
        toggleActions: 'play none none reverse',
      }
    });

    // Animate heading
    if (heading) {
      tl.to(heading, {
        opacity: 1,
        y: 0,
        duration: 0.8,
        ease: 'power3.out'
      });
    }

    // Animate timeline path drawing
    tl.to(timelinePath, {
      strokeDashoffset: 0,
      duration: 1.5,
      ease: 'power2.inOut'
    }, '-=0.3');

    // Animate experience items and timeline points
    experienceItems.forEach((item, index) => {
      const point = timelinePoints[index];
      const tasks = item.querySelectorAll('.task-item');
      
      // Create individual timeline for each experience
      const itemTl = gsap.timeline({
        scrollTrigger: {
          trigger: item,
          start: 'top 85%',
          toggleActions: 'play none none reverse',
        }
      });

      // Animate timeline point
      if (point) {
        itemTl.to(point, {
          opacity: 1,
          scale: 1,
          duration: 0.6,
          ease: 'back.out(1.7)',
          onComplete: () => {
            point.classList.add('animated');
          }
        });
      }

      // Animate experience content
      itemTl.to(item, {
        opacity: 1,
        x: 0,
        duration: 0.8,
        ease: 'power3.out'
      }, '-=0.3');

      // Animate tasks with stagger
      if (tasks.length > 0) {
        itemTl.to(tasks, {
          opacity: 1,
          x: 0,
          duration: 0.5,
          stagger: 0.1,
          ease: 'power2.out'
        }, '-=0.4');
      }
    });

    // Add hover effects for timeline points
    timelinePoints.forEach(point => {
      const pointInner = point.querySelector('.point-inner');
      
      if (pointInner) {
        point.addEventListener('mouseenter', () => {
          gsap.to(pointInner, {
            scale: 1.3,
            duration: 0.3,
            ease: 'power2.out'
          });
        });

        point.addEventListener('mouseleave', () => {
          gsap.to(pointInner, {
            scale: 1,
            duration: 0.3,
            ease: 'power2.out'
          });
        });
      }
    });

    // Parallax effect for timeline
    gsap.to(timelinePath, {
      yPercent: -20,
      ease: 'none',
      scrollTrigger: {
        trigger: section,
        start: 'top bottom',
        end: 'bottom top',
        scrub: 1
      }
    });
  });
</script>