---
import { experiences } from '../utils/experiences.js';
---

<section class="experience-section" id="experience">
  <div class="experience-container">
    <h2>Expérience professionnelle</h2>
    <div class="experience-timeline">
      <!-- SVG Timeline -->
      <svg class="timeline-svg" viewBox="0 0 4 800" preserveAspectRatio="none">
        <defs>
          <linearGradient id="timelineGradient" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="0%" style="stop-color:var(--green);stop-opacity:1" />
            <stop offset="50%" style="stop-color:var(--green);stop-opacity:0.8" />
            <stop offset="100%" style="stop-color:var(--green);stop-opacity:0.3" />
          </linearGradient>
          <filter id="glow">
            <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
            <feMerge> 
              <feMergeNode in="coloredBlur"/>
              <feMergeNode in="SourceGraphic"/>
            </feMerge>
          </filter>
        </defs>
        <path 
          class="timeline-path" 
          d="M2,0 L2,800" 
          stroke="url(#timelineGradient)" 
          stroke-width="3" 
          fill="none"
          filter="url(#glow)"
          stroke-dasharray="1000"
          stroke-dashoffset="1000"
        />
        <!-- Connection lines for each experience -->
        {experiences.map((_, index) => {
          const yPosition = 80 + (index * 200);
          return (
            <line 
              class={`connection-line connection-${index}`}
              x1="2" 
              y1={yPosition} 
              x2="30" 
              y2={yPosition}
              stroke="var(--green)" 
              stroke-width="2"
              opacity="0.7"
              stroke-dasharray="30"
              stroke-dashoffset="30"
            />
          );
        })}
      </svg>

      {experiences.map((exp, index) => (
        <article class="experience-item" data-index={index} key={index}>
          <!-- Enhanced Timeline Point -->
          <div class="timeline-point" data-point={index}>
            <div class="point-outer-ring"></div>
            <div class="point-inner"></div>
            <div class="point-pulse"></div>
            <div class="point-number">{index + 1}</div>
          </div>
          
          <div class="experience-content">
            <div class="experience-header">
              <h3 class="experience-title">{exp.title}</h3>
              <div class="experience-company">
                <a 
                  href={exp.link} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  aria-label={`Visiter le site de ${exp.company} (ouvre dans un nouvel onglet)`}
                >
                  {exp.company}
                  <i class="fas fa-external-link-alt" aria-hidden="true"></i>
                </a>
              </div>
              <div class="experience-duration">{exp.duration}</div>
            </div>
            <div class="experience-tasks">
              <h4 class="sr-only">Missions et responsabilités</h4>
              <ul role="list">
                {exp.tasks.map((task, taskIndex) => (
                  <li key={taskIndex} role="listitem" class="task-item" data-task={taskIndex}>
                    <span class="task-bullet"></span>
                    {task}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</section>

<style lang="scss">
  .experience-section {
    position: relative;
    background-color: var(--bg-color);
    padding: 200px 0;
    min-height: 100vh;
    z-index: 2;
    overflow: hidden;

    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(circle at 20% 50%, rgba(74, 158, 255, 0.03) 0%, transparent 50%);
      pointer-events: none;
    }

    h2 {
      text-align: center;
      color: var(--white);
      margin-bottom: 4rem;
      font-size: 2.5rem;
      opacity: 0;
      transform: translateY(30px);
      position: relative;
      
      &::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 60px;
        height: 3px;
        background: var(--green);
        border-radius: 2px;
        opacity: 0;
      }
    }
  }

  .experience-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 200px;

    @media (max-width: 1024px) {
      padding: 0 70px;
    }

    @media (max-width: 600px) {
      padding: 0 20px;
    }
  }

  .experience-timeline {
    position: relative;
    padding-left: 100px;

    @media (max-width: 768px) {
      padding-left: 70px;
    }
  }

  .timeline-svg {
    position: absolute;
    left: 40px;
    top: 0;
    width: 40px;
    height: 100%;
    z-index: 1;

    @media (max-width: 768px) {
      left: 25px;
      width: 35px;
    }
  }

  .timeline-path {
    opacity: 0;
  }

  .connection-line {
    opacity: 0;
  }

  .experience-item {
    position: relative;
    margin-bottom: 6rem;
    opacity: 0;
    transform: translateX(-80px);

    &:last-child {
      margin-bottom: 2rem;
    }
  }

  .timeline-point {
    position: absolute;
    left: -75px;
    top: 30px;
    width: 30px;
    height: 30px;
    z-index: 3;
    opacity: 0;
    transform: scale(0);
    cursor: pointer;

    @media (max-width: 768px) {
      left: -55px;
      width: 25px;
      height: 25px;
    }

    .point-outer-ring {
      position: absolute;
      top: -5px;
      left: -5px;
      width: 40px;
      height: 40px;
      border: 2px solid var(--green);
      border-radius: 50%;
      opacity: 0;
      
      @media (max-width: 768px) {
        width: 35px;
        height: 35px;
      }
    }

    .point-inner {
      width: 100%;
      height: 100%;
      background: var(--green);
      border-radius: 50%;
      border: 4px solid var(--bg-color);
      position: relative;
      z-index: 4;
      box-shadow: 0 0 20px rgba(74, 158, 255, 0.5);
    }

    .point-pulse {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 100%;
      height: 100%;
      background: var(--green);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      z-index: 2;
    }

    .point-number {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: var(--bg-color);
      font-weight: bold;
      font-size: 12px;
      z-index: 5;
      opacity: 0;

      @media (max-width: 768px) {
        font-size: 10px;
      }
    }

    &:hover {
      .point-inner {
        transform: scale(1.2);
        box-shadow: 0 0 30px rgba(74, 158, 255, 0.8);
      }
      
      .point-outer-ring {
        transform: scale(1.3);
      }
    }
  }

  .experience-content {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    padding: 2.5rem;
    border-left: 4px solid var(--green);
    transition: all 0.4s ease;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    position: relative;
    overflow: hidden;

    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, rgba(74, 158, 255, 0.05) 0%, transparent 50%);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    &:hover {
      background: rgba(255, 255, 255, 0.08);
      transform: translateY(-5px);
      box-shadow: 0 15px 40px rgba(74, 158, 255, 0.15);
      border-left-width: 6px;

      &::before {
        opacity: 1;
      }
    }
  }

  .experience-header {
    margin-bottom: 2rem;
  }

  .experience-title {
    font-size: var(--fz-xl);
    color: var(--white);
    margin: 0 0 0.75rem 0;
    font-weight: 600;
    position: relative;
  }

  .experience-company {
    margin-bottom: 0.75rem;

    a {
      color: var(--green);
      font-weight: 500;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      position: relative;

      &::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 0;
        height: 2px;
        background: var(--green);
        transition: width 0.3s ease;
      }

      &:hover {
        color: var(--white);
        transform: translateX(5px);

        &::after {
          width: calc(100% - 20px);
        }
      }

      i {
        font-size: 0.8rem;
        transition: transform 0.3s ease;
      }

      &:hover i {
        transform: translateX(3px) scale(1.1);
      }
    }
  }

  .experience-duration {
    color: var(--light-slate);
    font-size: var(--fz-sm);
    font-family: var(--font-mono);
    background: rgba(74, 158, 255, 0.1);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    display: inline-block;
  }

  .experience-tasks {
    ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .task-item {
      position: relative;
      padding-left: 2rem;
      margin-bottom: 1rem;
      color: var(--light-slate);
      line-height: 1.7;
      opacity: 0;
      transform: translateX(-30px);
      display: flex;
      align-items: flex-start;
      gap: 0.75rem;

      .task-bullet {
        width: 6px;
        height: 6px;
        background: var(--green);
        border-radius: 50%;
        margin-top: 0.6rem;
        flex-shrink: 0;
        opacity: 0;
        transform: scale(0);
      }

      &:hover {
        color: var(--white);
        
        .task-bullet {
          background: var(--white);
          transform: scale(1.3);
        }
      }
    }
  }

  // Enhanced pulse animation
  @keyframes pulse {
    0% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 0.8;
    }
    50% {
      transform: translate(-50%, -50%) scale(2);
      opacity: 0.3;
    }
    100% {
      transform: translate(-50%, -50%) scale(3);
      opacity: 0;
    }
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .timeline-point.animated {
    .point-pulse {
      animation: pulse 3s ease-out infinite;
    }
    
    .point-outer-ring {
      animation: rotate 20s linear infinite;
    }
  }
</style>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', () => {
    const section = document.querySelector('.experience-section');
    const heading = section?.querySelector('h2');
    const headingUnderline = section?.querySelector('h2::after');
    const timelinePath = section?.querySelector('.timeline-path');
    const connectionLines = section?.querySelectorAll('.connection-line');
    const experienceItems = section?.querySelectorAll('.experience-item');
    const timelinePoints = section?.querySelectorAll('.timeline-point');
    
    if (!section || !timelinePath) return;

    // Animate heading first
    if (heading) {
      gsap.to(heading, {
        opacity: 1,
        y: 0,
        duration: 1,
        ease: 'power3.out',
        scrollTrigger: {
          trigger: section,
          start: 'top 80%',
          toggleActions: 'play none none reverse',
        }
      });

      // Animate heading underline
      gsap.to(heading, {
        '--after-opacity': 1,
        duration: 0.8,
        delay: 0.5,
        scrollTrigger: {
          trigger: section,
          start: 'top 80%',
          toggleActions: 'play none none reverse',
        }
      });
    }

    // Progressive timeline drawing based on scroll
    ScrollTrigger.create({
      trigger: section,
      start: 'top 60%',
      end: 'bottom 20%',
      scrub: 1,
      onUpdate: (self) => {
        // Calculate progress and animate timeline path
        const progress = self.progress;
        const dashOffset = 1000 - (1000 * progress);
        
        gsap.set(timelinePath, {
          opacity: 1,
          strokeDashoffset: dashOffset
        });
      }
    });

    // Animate each experience item individually
    experienceItems.forEach((item, index) => {
      const point = timelinePoints[index];
      const connectionLine = connectionLines[index];
      const tasks = item.querySelectorAll('.task-item');
      const taskBullets = item.querySelectorAll('.task-bullet');
      
      // Create timeline for each experience
      const itemTl = gsap.timeline({
        scrollTrigger: {
          trigger: item,
          start: 'top 75%',
          toggleActions: 'play none none reverse',
        }
      });

      // Animate connection line first
      if (connectionLine) {
        itemTl.to(connectionLine, {
          strokeDashoffset: 0,
          opacity: 1,
          duration: 0.6,
          ease: 'power2.out'
        });
      }

      // Animate timeline point with enhanced effects
      if (point) {
        const pointInner = point.querySelector('.point-inner');
        const pointRing = point.querySelector('.point-outer-ring');
        const pointNumber = point.querySelector('.point-number');
        const pointPulse = point.querySelector('.point-pulse');

        // Point appears with bounce effect
        itemTl.to(point, {
          opacity: 1,
          scale: 1,
          duration: 0.8,
          ease: 'back.out(2)',
        }, '-=0.3')
        
        // Outer ring appears
        .to(pointRing, {
          opacity: 0.6,
          scale: 1,
          duration: 0.6,
          ease: 'power2.out'
        }, '-=0.5')
        
        // Number appears
        .to(pointNumber, {
          opacity: 1,
          duration: 0.4,
          ease: 'power2.out'
        }, '-=0.3')
        
        // Start pulse animation
        .to(pointPulse, {
          opacity: 0.8,
          duration: 0.1,
          onComplete: () => {
            point.classList.add('animated');
          }
        }, '-=0.2');
      }

      // Animate experience content
      itemTl.to(item, {
        opacity: 1,
        x: 0,
        duration: 1,
        ease: 'power3.out'
      }, '-=0.6');

      // Animate task bullets with stagger
      if (taskBullets.length > 0) {
        itemTl.to(taskBullets, {
          opacity: 1,
          scale: 1,
          duration: 0.4,
          stagger: 0.1,
          ease: 'back.out(1.7)'
        }, '-=0.4');
      }

      // Animate task text with stagger
      if (tasks.length > 0) {
        itemTl.to(tasks, {
          opacity: 1,
          x: 0,
          duration: 0.6,
          stagger: 0.12,
          ease: 'power2.out'
        }, '-=0.5');
      }
    });

    // Enhanced hover effects for timeline points
    timelinePoints.forEach((point) => {
      const pointInner = point.querySelector('.point-inner');
      const pointRing = point.querySelector('.point-outer-ring');
      
      if (pointInner && pointRing) {
        point.addEventListener('mouseenter', () => {
          gsap.to(pointInner, {
            scale: 1.4,
            boxShadow: '0 0 40px rgba(74, 158, 255, 0.8)',
            duration: 0.4,
            ease: 'power2.out'
          });
          gsap.to(pointRing, {
            scale: 1.5,
            opacity: 0.8,
            duration: 0.4,
            ease: 'power2.out'
          });
        });

        point.addEventListener('mouseleave', () => {
          gsap.to(pointInner, {
            scale: 1,
            boxShadow: '0 0 20px rgba(74, 158, 255, 0.5)',
            duration: 0.4,
            ease: 'power2.out'
          });
          gsap.to(pointRing, {
            scale: 1,
            opacity: 0.6,
            duration: 0.4,
            ease: 'power2.out'
          });
        });
      }
    });

    // Subtle parallax effect for the timeline
    gsap.to(timelinePath, {
      yPercent: -10,
      ease: 'none',
      scrollTrigger: {
        trigger: section,
        start: 'top bottom',
        end: 'bottom top',
        scrub: 2
      }
    });

    // Floating animation for timeline points
    timelinePoints.forEach((point, index) => {
      gsap.to(point, {
        y: "+=8",
        duration: 2.5 + (index * 0.3),
        ease: 'power1.inOut',
        yoyo: true,
        repeat: -1,
        delay: index * 0.4
      });
    });
  });
</script>